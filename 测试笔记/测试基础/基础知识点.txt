********************************************************第一章  IT行业及软件测试**********************************************************
一、软件测试的核心：检测被测对象是否满足用户的要求。

二、软件测试与软件开发对比
	1）知识体系不同；2）技术技能要求不同；3）问题思维模式不同；4）专注力不同。

三、软件测试任职要求
	1）学历；2）专业；3）经验；4）测试技术；5）开发技能；6）业务知识

四、职业素质要求
	1）责任心；2）沟通能力；3）团队合作精神；4）耐心、细心、信心；5）风险防范意识；6）持续学习能力。

********************************************************第二章  软件生命周期概述********************************************************
一、软件的基本概念
	软件是指一系列按照某种特定规则组织在一起，实现用户需求的计算及数据和指令的集合体
	简单而言，软件即源代码、数据文档和配置数据的集合体

二、软件生命周期
	1、市场需求调研
	2、可行性研究（软件产品成败受4方面的约束：Time（时间）、Scope（范围）、Cost（成本）、Risk（风险））
	3、产品项目立项
	4、需求调研开发（主动模式（产品）和被动模式（项目），需求规格说明书（SRS)或产品文档（PRD））
	5、设计开发测试
	6、发布运行维护

********************************************************第三章  团队组织形式**************************************************************
一、软件公司业务形式
	自研公司：自主研发产品
	外包公司：将产品中技术层面的工作拆分出来，交由技术实力强劲的公司
		分类：1）合同业务管理方式；2）委托方式；

二、软件研发团队架构
	研发人员构成：研发组长；美工/页面制作人员；系统架构师；开发工程师
	软件测试团队（存在形式：1、隶属于研发团队；2、有独立测试团队；3、 既有独立团队，又隶属于研发团队。）
		测试主管、测试组长、环境保障人员、配置管理员、测试设计人员、测试工程师。

********************************************************第四章  开发与测试模型************************************************************
一、软件研发模型
	瀑布模型：计划→需求分析→设计→编码→测试→运行维护；自上而下，相互衔接
		缺点：各阶段划分完全固定，阶段之间产生大量文档，增加工作量；
		         开发模式线性，用户只有等到整个过程末期才能见到开发成果，增加开发风险；
		         早期错误要等到开发后期测试阶段才能发现，介入较晚，人员闲置严重，后续工作跟不上。
	原型模型：产品设计者实现用户与软件系统的交互，更关注用户需求的正确性，减少由于需求调研不充分、表述不明确带来的风险，提高产品研发成功率。
	螺旋模型
	RUP模型
	敏捷模型：以人为核心，迭代，循序渐进的开发方法
		敏捷模型的价值观包括了极限编程（Extreme Programming，XP）的5个价值观：沟通；简单；反馈；勇气；谦逊。

二、软件测试模型
	V模型：由瀑布模型演变而来的测试模型。流程：从上至下、从左至右，研发测试人员进行需求分析、概要设计、详细设计、编码一系列研发活动后，生产测试版本。
	W模型：一般又称为双V模型，V模型中，研发活动没有完成、无任何输出物时，测试工作无法展开，W模型提出了测试活动与研发活动并行的概念，并在生产流程演讲过程中，增加了验证与确认活动。
	X模型：与W模型类似。
	H模型：将测试活动与其他研发流程独立，测试活动分为准备测试与测试执行两部分，便于测试设计与测试执行活动定义。
	敏捷测试模型：不断修正被测对象的质量指标，正确建立测试策略，确认客户的有效需求得以圆满实现和确保整个生产过程安全、及时的发布最终产品。
		通常要求测试工程师技术技能、业务理解、产品设计等方面都要熟练，团队人员稳定。

********************************************************第五章  软件测试基础**************************************************************
一、软件测试定义：即检测、检验，利用一定的手段，检测被测对象特性表现是否与与其需求一致。

二、软件测试的目的
	1、发现被测对象与用户需求之间的差异，及缺陷；
	2、通过测试活动发现并解决缺陷，增加人们对软件质量的信心；
	3、通过测试活动了解被测对象的质量状况，为决策提供数据依据；
	4、通过测试活动积累经验，预防缺陷出现，降低产品失败风险。

三、缺陷的定义：一切与用户显性或隐性需求不相符的错误。

四、缺陷产生原因
	1、需求表述、理解、编写引起的错误；
	2、系统设计架构引起的错误；
	3、开发过程缺乏有效的沟通及监督，甚至没有；
	4、程序员编程中产生的错误
	5、软件开发工具本身隐藏的问题；
	6、软件复杂度越来越高；
	7、与用户需求不符，即使软件实现本身无缺陷；
	8、外界应用环境或电磁辐射导致的缺陷。
	常见的缺陷分为4中情况：1）遗漏：规定或预期的需求未体现在产品中；
			     2）错误：需求是正确的，但在实现阶段未将规格说明正确实现；
			     3）冗余：需求规格说明未涉及的需求被实现，及用户未提及或无需的需求，在被测对象中的到了实现；
			     4）不满意。

五、软件缺陷报告
	1）缺陷ID；2）概要描述；3）发现人；4）发现时间；5）修复时间；6）所属版本；7）所属模块；
	8）缺陷状态：新建（New）、打开（Open）、修复（Fix）、关闭（Close）、重新打开（Reopen）、拒绝（Reject）、延期、挂起。
	9）缺陷严重度：Low（低）：仅仅是导致用户感觉使用不方便，或者系统展示不够人性化。
		        Medium（中）：一般为错别字、字体错误、显示错误、子功能实现错误、冗余等。
		        High（高）：当缺陷应错误、遗漏、冗余等原因引起，导致当前功能无法正常使用时。
		        Very High（非常高）：当前缺陷引起了子功能无法正常使用，或产生了不可逆转的错误时。
		        Urgent（紧急）：缺陷引发了大面积功能错误、业务中断、流程错误，甚至系统崩溃，产生初始化错误或终止性故障时。
	10）修复优先级；11）下步处理人；12）详细描述；13）附件。
	缺陷报告编写遵循原则：1）Correct（准确）；2）Clear（清晰）；3）Concise（简洁）；4）Complete（完整）；5）Consistent（一致）。

六、软件测试原则
	1、测试证明软件存在缺陷；
	2、不可能穷尽测试；
	3、测试应尽早介入、尽早启动；
	4、缺陷存在群集现象；
	5、杀虫剂悖论：1）完善测试用例；2）交叉测试。
	6、不同的测试活动依赖于不同的测试环境；
	7不存在缺陷的谬论。

七、软件测试级别
	1）需求测试：重点检查需求规格说明书中是否存在描述不准确、定义模糊、需求用例不正确、语言存在二义性等问题；
	2）组件/单元测试：验证被测对象的功能特性或非功能特性，发现其可能存在的内存泄露、算法冗余、分支覆盖率低、循环调用效率低等问题；
	3）集成测试：对组件/单元之间及组件/单元与第三方接口之间进行测试，其目的是验证接口是否与设计相符，是否与需求相符；
	4）系统测试：将通过集成测试的软件，部署到某种较为复杂的计算机用户环境进行测试（模拟的用户真实计算机环境）；
	5）验收测试（对于项目类软件）：Alpha测试（用户在开发环境下的测试，也可以是开发机构内部的用户模拟实际操作环境中进行测试。
				  beta测试（软件的多个用户在一个或多个用户的实际使用环境下进行的测试。
				     前两者不同的时，alpha测试开发者坐在用户旁，随时记录错误情况和使用问题，beta测试开发者通常不在测试现场，测试者发现问题后统一收集提交。
				  UAT测试：一般用于商业用户验证系统的可用性。（用户接受度测试）。

八、软件测试类型
	1）功能测试：验证软件在指定条件下使用时，提供满足明确和隐含功能需求的能力情况；
		a、是否又不正确、遗漏或多余的功能；b、是否满足用户需求和系统设计的隐藏需求；
		c、是否对输入做出正确的响应，输出结果能否正确展示。
	2）性能测试：通过模拟系统运行业务压力和使用场景组合，验证系统性能是否满足预先定义的性能要求；
		a、主要目的是验证是否具有宣称具有的能力；b、需了解测试系统典型场景，并具有确定的性能目标；
		c、要求在真实的运行环境下执行。
		备注：关注被测对象的响应速度、并发数、业务成功率及资源占用情况。
	3）负载测试是指在超过被测对象标准性能负荷指标下，验证系统的负载承受能力，并要求在超负荷时，被测对象依然能正常实现业务功能；
		a、主要目的时找到系统处理能力极限和性能临界点，便于设定阈值；
		b、在超过被测对象性能负荷情况下实施；c、一般用来了解系统性能容量，或者配合性能调优来使用。
	4）压力测试：被测对象在超过性能指标的饱和状态下，系统处理业务的能力情况，以及系统是否会出现错误；
		a、主要目的是检查被测对象在峰值情况下应用的表现；
		备注：持续关注被测对象持续服务的能力；系统稳定性测试。
	5）容量测试：验证被测对象承受超额数据容量时，正确处理业务请求的能力；
	6）安全测试：验证被测对象的安全保护机制能否在实际应用中保护系统不受非法入侵，用来保证系统本身数据的完整性和保密性；
	7）兼容性测试：验证被测对象与硬件、其他软件之间的兼容问题；
	8）可靠性测试：验证被测对象在规定时间、规定环境条件下，实现规定功能或性能的能力；
	9）可用性测试：在特定使用情景下，软件产品能够被用户理解、学习、使用，能够吸引用户的能力；
	10）移植测试：软件产品能否顺利地移植到新的硬件和软件平台上，移植之后软件仍然能满足用户需求；
	11）维护测试：软件系统在部署运行交付使用之后，在实际使用过程中，因改正错误或需求变更而引发的确认验证测试活动；
	12）确认测试：测试工程师发现缺陷，开发人员进行修复，生成新的版本时，需要确认是否已经成功修复了该缺陷；
	13）回归测试：对已被测试过的程序在修复缺陷后进行的重复测试，目的是验证修复缺陷没有引发新的缺陷或问题。

九、软件测试方法
	1）黑盒测试：不考虑程序内部逻辑结构和内部特性，只依据需求规格说明书、设计文档及其他需求描述文档，检查被测对象是否与期望一致；
	2）白盒测试：又称结构测试、逻辑驱动或基于程序代码内部构成的测试。考虑程序内部逻辑结构和内部特性；
	3）灰盒测试：介于黑盒测试和白盒测试之间，白加黑；
	4）静态测试：不执行被测对象程序代码、不运行被测对象而实施的测试活动；
	5）动态测试：运行被测对象的程序代码，执行测试用例，检查系统软件运行结果与预期结果的差异；
	6）手动测试；
	7）自动化测试。

********************************************************第六章  软件测试流程**************************************************************
一、完整测试流程：1）需求评审；2）测试计划；3）用例设计；4）用例评审；
	5）执行测试 （a、预测试或者冒烟测试，主流层；b、系统测试）；
	6）回归测试；7）测试报告。（配置测试环境和测试数据准备可以放到执行测试里面）
	注意：根据公司要求不同，或者团队人员配比不同，可能没有测试计划、用例评审、测试报告环节。

********************************************************第七章  软件测试设计**************************************************************
一、软件质量特性
	1）功能性；2）可靠性；3）易用性；4）效率；5）可维护性；6）可移植性；7）用户满意度。

二、测试需求分析
	依据：1、需求规格说明书
	          2、无需求文档：考虑用户角度、符合日常生活逻辑、参考同行竞品
	分析规则：逐步细化原则，直到不能再做出分类为止。

三、为什么要做用例设计？
	不可能做穷举（无穷无尽）测试
	用尽量少的测试用例覆盖尽可能多的测试点。

四、测试方法有哪些？
	1、黑盒测试：等价类、边界值、判定表、正交实验、状态迁移、场景分析、错误推测法
	2、白盒测试：语句覆盖、判定覆盖、条件覆盖、判定条件覆盖、路径覆盖。

五、测试用例：一般由Excel或禅道进行管理。
	用例：即测试时一个具体的测试例子
	用例包含内容：用例编号、测试项（模块）、测试标题、用例属性、重要级别、前置条件、测试输入、操作步骤、预期结果、实际结果、备注等（测试人员、设计人员、测试日期）。

六、用例设计原则
  	1）、有效用例：一个输入尽可能多的去覆盖有效等价类，一对多
  	2）、无效用例：一个输入只能覆盖一个无效等价类，一对一

七、编写原则：1、简洁：无废话，多余的语句
	2、正确：描述正确，无错误描述
	3、完整：包含所有必要信息
	4、清晰：易于理解
	5、一致性：前后内容一致，衔接紧密

八、测试用例设计方法：
	1、等价类划分：
		等价：指某类事物具有相同的属性或特性，在此集合中个体之间因外部输入引起的响应基本无差异。
		等价又分为有效等价类、无效等价类。
		使用有效等价类的目的是为了验证软件符合需求说明书上的功能，使用无效等价是为了考察软件对异常数据的处理能力。
		等价类使用情况：当一个集合中的任意输入引起的输出基本无差异时或者说在有输入的地方可以分类时，都可以考虑等价类。
		边界值适用情况：需求说明书中规定了取值范围或者规定了值的个数。
			
		总结：用例设计原则
  			1）、有效用例：一个输入尽可能多的去覆盖有效等价类，一对多
  			2）、无效用例：一个输入只能覆盖一个无效等价类，一对一

	2、边界值分析：边界值一般结合等价类划分一起使用，只是在提取测试数据时更关注边界的临界点。
		上点：即边界上的点（边界值）
		离点：离上点最近的一个点，一般取刚刚大于、刚刚小于。
		内点：区域范围内的任意1个点。
		适用情况：当需求规定了取值范围或取值个数时。

	3、场景设计法：涉及业务流程的，采用场景设计方法比较恰当。
		找到基本流、备选流、异常流
		拟出每种场景的流程，针对每个流程规则设置一条测试用例。
		适用情况：针对业务流程较多或较复杂，或者某些项目有具体的思维导图流程时，
		eg:企业内部综合管理系统、建筑公司管理系统当中涉及很多审批流程的情况。

	4、判定表：根据输入条件的不同组合情况，来观察系统的响应情况。
	5、正交实验：研究多因子（因素=输入项）多水平（状态=输入状态）的一种试验设计方法。
		正交表如何得到行数（测试用例数）：n=k*(m-1)+1 
		正交表是一种特制的表格，一般用Ln(mk)表示，L代表是正交表，
		n代表试验次数或正交表的行数，k代表最多可安排影响指标因素的个数或正交表的列数，
		m表示每个因素水平数，且有n=k*(m-1)+1。 
			
		正交表的特点：
			1）每个因子的水平情况相等，比如有三个输入条件，每个条件只有两种相同的状态。
			2）任意两列其横向组成的数字对，每种数字对出现的情况相等。
	
	6、状态迁移：关注被测对象的状态变化，在需求书中是否有不可达到的状态和非法状态，是否产生非法的状态迁移。
		方法：
		       找到状态节点、绘制迁移图、绘制迁移树、抽取测试路径设计用例。
	7、错误推测法：根据测试者的直觉或工作经验，来初步判定哪些地方容易出错，然后针对性的设计测试用例。
		eg：比如涉及收付费时，重点关注跨月、跨年；比如某个查询界面涉及到两个日期时，考虑是否存在日期先后逻辑；
		比如平板APP、手机APP上涉及到文件或日程提醒保存时，非空验证；电商系统涉及订单时，重点关注场景流程中订单状态变化是否正常；
		移动端涉及翻页时注意快速向前、向后翻页是否引起崩溃等。

九、白盒测试常用方法：
		1、语句覆盖：被测代码的每条语句至少覆盖一次。
		2、判定覆盖：被测程序中包含判定（if语句），则需要将if语句为真为假各取1次。
		3、条件覆盖：针对判定（if语句）中每个条件为真为假各取1次。
		4、判定条件覆盖：被测对象所有的判定及条件所取的真假值至少被覆盖一次。
		5、路径覆盖：保证被测对象的每一条路径都经过测试。